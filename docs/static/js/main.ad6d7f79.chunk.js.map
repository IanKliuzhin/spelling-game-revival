{"version":3,"sources":["store/connectionStore/types.ts","components/GlobalWrapper/GlobalWrapper.tsx","store/connectionStore/firebaseConfig.ts","store/connectionStore/connectionStore.ts","store/gameStore/types.ts","store/gameStore/exercises.ts","components/Button/Button.tsx","store/gameStore/gameStore.ts","utils/helpers.ts","store/pageStore/pageStore.ts","store/battleStore/battleStore.ts","store/store.ts","pages/ConnectionForm/ConnectionForm.tsx","pages/BattleInfo/BattleInfo.tsx","components/PageManager/PageManager.tsx","pages/MainMenu/MainMenu.tsx","pages/DifficultyChoice/DifficultyChoice.tsx","pages/Battle/Battle.tsx","components/Button/MainMenuButton/MainMenuButton.tsx","components/Button/StartButton/StartButton.tsx","components/LifeItem/LifeItem.tsx","components/LifeList/LifeList.tsx","components/LetterAnswer/LetterAnswer.tsx","components/WordAnswer/WordAnswer.tsx","components/InputLetter/InputLetter.tsx","components/Countdown/Countdown.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["MessageType","GlobalWrapper","children","className","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DifficultyType","PlayerType","CONNECTION_CONFIG","iceServers","urls","sdpSemantics","ConnectionStore","rootStore","db","connectionId","connection","channel","isConnected","setIsConnected","startHostSession","a","RTCPeerConnection","nanoid","oniceconnectionstatechange","console","log","iceConnectionState","gameStore","resetGame","onicecandidate","event","candidate","push","ref","JSON","stringify","setChannel","createDataChannel","createOffer","offer","setLocalDescription","catch","e","set","value","onValue","snapshot","exists","val","answer","parse","setRemoteDescription","forEach","child","addIceCandidate","RTCIceCandidate","startClientSession","receiveChannelCallback","ev","ondatachannel","createAnswer","onmessage","data","handleMessage","onclose","onerror","error","onopen","sendMessage","message","send","closeConnection","remove","close","type","START_GAME","startGame","START_BATTLE","startBattle","exercise","FINISH_EXERCISE","saveBattleResult","secondsLeft","lifesLeft","END_GAME","endGame","REQUEST_RESTART","saveRestartRequest","makeObservable","this","observable","action","app","initializeApp","getDatabase","ButtonType","exercises","EASY","word","soundSrc","imageSrc","MEDIUM","HARD","GameStore","difficulty","playerType","HOST","gameId","isGameStarted","isGameEnded","heroScore","rivalScore","currentBattleIndex","heroBattleResult","rivalBattleResult","setDifficulty","setPlayerType","setScore","getExercises","array","arrayCopy","i","length","j","Math","floor","random","shuffle","slice","pageStore","changePage","battleStore","connectionStore","addScores","result","isRival","endBattle","PageStore","activePageName","pageName","BattleStore","exerciseData","counterLife","listLetter","isMistake","isPlayingSound","isCorrectAnswer","activeLetter","setActiveLetter","letter","getMistake","setPlayingSound","state","setMistake","getListLetter","setLetter","checkMistake","checkLetter","checkWord","indexOf","RootStore","ContextStore","createContext","useStore","useContext","ConnectionForm","observer","useState","setGameId","isConnecting","setIsConnecting","handleConnectClick","useEffect","onChange","target","handleClick","text","BattleInfo","pages","mainMenu","CLIENT","difficultyChoice","Object","values","map","handleDifficultyChoice","connectionForm","battleInfo","battle","styleImage","backgroundImage","isBattleEnded","isCountdownGoing","setIsCountdownGoing","styleAnswer","cn","correctAnswer","count","callback","style","onClick","src","playing","onEnd","WordAnswer","letters","PageManager","PageComponent","Button","MainMenuButton","MAIN_MENU","StartButton","getText","LifeItem","isDisabled","styleItem","disabledElem","LifeList","listItem","LetterAnswer","index","InputLetter","styleContainer","hide","mistake","autoFocus","maxLength","Countdown","setSecondsLeft","window","setTimeout","App","onPerfEntry","store","DEBUG_STORE","ReactDOM","render","Provider","document","getElementById","runApp","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.ad6d7f79.chunk.js","sourcesContent":["import { Database } from '@firebase/database';\nimport { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\n\nexport type ConnectionStoreType = {\n  db: Database;\n  connectionId: string | null;\n  connection: RTCPeerConnection | null;\n  channel: RTCDataChannel | null;\n  isConnected: boolean;\n  rootStore: RootStore;\n  setIsConnected: (isConnected: boolean) => void;\n  startHostSession: () => Promise<void>;\n  startClientSession: (connectionId: string) => Promise<void>;\n  setChannel: (channel: RTCDataChannel) => void;\n  sendMessage: (message: Message) => void;\n  closeConnection: () => void;\n  handleMessage: (message: Message) => void;\n};\n\nexport enum MessageType {\n  START_GAME = 'start-game',\n  START_BATTLE = 'start-battle',\n  FINISH_EXERCISE = 'finish-exercise',\n  END_GAME = 'end-game',\n  REQUEST_RESTART = 'request-restart',\n}\n\nexport type Message =\n  | {\n      type: MessageType.START_GAME;\n    }\n  | {\n      type: MessageType.START_BATTLE;\n      exercise: ExerciseDataType;\n    }\n  | {\n      type: MessageType.FINISH_EXERCISE;\n      secondsLeft: number;\n      lifesLeft: number;\n    }\n  | {\n      type: MessageType.END_GAME;\n    }\n  | {\n      type: MessageType.REQUEST_RESTART;\n    };\n","import { ReactNode } from 'react';\n\nimport './style.scss';\n\nexport const GlobalWrapper = ({ children }: { children: ReactNode }) => {\n  return <div className=\"globalWrapper\">{children}</div>;\n};\n","export const firebaseConfig = {\n  apiKey: 'AIzaSyCfIbQmfN8ZWunC13zhJyDoQ1aL34mKvHI',\n  authDomain: 'react-p2p-test.firebaseapp.com',\n  databaseURL:\n    'https://react-p2p-test-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'react-p2p-test',\n  storageBucket: 'react-p2p-test.appspot.com',\n  messagingSenderId: '54650620648',\n  appId: '1:54650620648:web:a3a8bc21fd8bcd4782975d',\n};\n","import { makeObservable, observable, action } from 'mobx';\nimport { initializeApp } from 'firebase/app';\nimport {\n  Database,\n  getDatabase,\n  ref,\n  set,\n  onValue,\n  remove,\n  push,\n} from 'firebase/database';\nimport { nanoid } from 'nanoid';\nimport { firebaseConfig } from './firebaseConfig';\nimport { RootStore } from '..';\nimport { ConnectionStoreType, Message, MessageType } from './types';\n\nconst CONNECTION_CONFIG = {\n  iceServers: [{ urls: 'stun:stun2.1.google.com:19302' }],\n  sdpSemantics: 'unified-plan',\n};\n\nexport class ConnectionStore implements ConnectionStoreType {\n  db: Database;\n  connectionId: string | null = null;\n  connection: RTCPeerConnection | null = null;\n  channel: RTCDataChannel | null = null;\n  isConnected = false;\n  rootStore: RootStore;\n\n  constructor({ rootStore }: { rootStore: RootStore }) {\n    makeObservable(this, {\n      connectionId: observable,\n      isConnected: observable,\n      setIsConnected: action,\n      closeConnection: action,\n    });\n    this.rootStore = rootStore;\n    const app = initializeApp(firebaseConfig);\n    this.db = getDatabase(app);\n  }\n\n  setIsConnected = (isConnected: boolean) => {\n    this.isConnected = isConnected;\n  };\n\n  startHostSession = async () => {\n    this.connection = new RTCPeerConnection(CONNECTION_CONFIG);\n    this.connectionId = nanoid(5);\n    this.connection.oniceconnectionstatechange = () => {\n      console.log(\n        'this.connection?.iceConnectionState',\n        this.connection?.iceConnectionState,\n      );\n      if (this.connection?.iceConnectionState === 'disconnected') {\n        this.rootStore.gameStore.resetGame();\n      }\n    };\n\n    this.connection.onicecandidate = (event) => {\n      console.log('generated candidate', event.candidate);\n      if (this.connection && event.candidate) {\n        push(\n          ref(this.db, `${this.connectionId}/host-candidate`),\n          JSON.stringify(event.candidate),\n        );\n      }\n    };\n\n    this.setChannel(this.connection.createDataChannel('channel'));\n\n    const offer = await this.connection.createOffer();\n    await this.connection\n      .setLocalDescription(offer)\n      .catch((e) => console.log(e));\n    await set(ref(this.db, `${this.connectionId}/offer`), {\n      value: JSON.stringify(offer),\n    });\n    onValue(ref(this.db, `${this.connectionId}/answer`), (snapshot) => {\n      if (this.connection && snapshot.exists()) {\n        console.log('got answer from db', snapshot.val().value);\n        const answer = JSON.parse(snapshot.val().value);\n        this.connection\n          .setRemoteDescription(answer)\n          .catch((e) => console.log(e));\n      }\n    });\n\n    onValue(\n      ref(this.db, `${this.connectionId}/client-candidate`),\n      (snapshot) => {\n        if (snapshot.exists()) {\n          snapshot.forEach((child) => {\n            console.log('got client-candidate from db', child.val());\n            const candidate = JSON.parse(child.val());\n            this.connection\n              ?.addIceCandidate(new RTCIceCandidate(candidate))\n              .catch((e) => console.log(e));\n          });\n          this.setIsConnected(true);\n        }\n      },\n    );\n  };\n\n  startClientSession = async (connectionId: string) => {\n    this.connectionId = connectionId;\n    this.connection = new RTCPeerConnection(CONNECTION_CONFIG);\n\n    const receiveChannelCallback = (ev: RTCDataChannelEvent) => {\n      this.setChannel(ev.channel);\n    };\n    this.connection.ondatachannel = receiveChannelCallback;\n\n    this.connection.onicecandidate = (event) => {\n      console.log('generated candidate', event.candidate);\n      if (event.candidate) {\n        push(\n          ref(this.db, `${this.connectionId}/client-candidate`),\n          JSON.stringify(event.candidate),\n        );\n      }\n    };\n\n    onValue(ref(this.db, `${this.connectionId}/offer`), async (snapshot) => {\n      if (this.connection && snapshot.exists()) {\n        console.log('got offer from db', snapshot.val().value);\n        const offer = JSON.parse(snapshot.val().value);\n        await this.connection\n          ?.setRemoteDescription(offer)\n          .catch((e) => console.log(e));\n        const answer = await this.connection?.createAnswer();\n        await this.connection\n          ?.setLocalDescription(answer)\n          .catch((e) => console.log(e));\n        await set(ref(this.db, `${this.connectionId}/answer`), {\n          value: JSON.stringify(answer),\n        });\n\n        onValue(\n          ref(this.db, `${this.connectionId}/host-candidate`),\n          (snapshot) => {\n            if (snapshot.exists()) {\n              snapshot.forEach((child) => {\n                console.log('got host-candidate from db', child.val());\n                const candidate = JSON.parse(child.val());\n                this.connection\n                  ?.addIceCandidate(new RTCIceCandidate(candidate))\n                  .catch((e) => console.log(e));\n              });\n              this.setIsConnected(true);\n            }\n          },\n        );\n      }\n    });\n  };\n\n  setChannel = (channel: RTCDataChannel) => {\n    this.channel = channel;\n    this.channel.onmessage = (ev) => {\n      const data = JSON.parse(ev.data);\n      console.log('got data by channel', data);\n      this.handleMessage(data);\n    };\n    this.channel.onclose = () => {\n      console.log('Data Channel closed');\n      this.rootStore.gameStore.resetGame();\n    };\n    this.channel.onerror = (error) => {\n      console.log('Data Channel Error:', error);\n    };\n\n    this.channel.onopen = () => {\n      console.log('Data Channel open');\n    };\n  };\n\n  sendMessage = (message: Message) => {\n    this.channel?.send(JSON.stringify(message));\n  };\n\n  closeConnection = () => {\n    remove(ref(this.db, `${this.connectionId}`));\n    this.channel?.close();\n    this.connection?.close();\n\n    this.channel = null;\n    this.connection = null;\n    this.connectionId = null;\n    this.isConnected = false;\n  };\n\n  handleMessage = (message: Message) => {\n    switch (message.type) {\n      case MessageType.START_GAME:\n        this.rootStore.gameStore.startGame();\n        break;\n      case MessageType.START_BATTLE:\n        this.rootStore.gameStore.startBattle(message.exercise);\n        break;\n      case MessageType.FINISH_EXERCISE:\n        this.rootStore.gameStore.saveBattleResult(\n          {\n            secondsLeft: message.secondsLeft,\n            lifesLeft: message.lifesLeft,\n          },\n          true,\n        );\n        break;\n      case MessageType.END_GAME:\n        this.rootStore.gameStore.endGame();\n        break;\n      case MessageType.REQUEST_RESTART:\n        this.rootStore.gameStore.saveRestartRequest();\n        break;\n      default:\n        break;\n    }\n  };\n}\n","import { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\n\nexport enum DifficultyType {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport enum PlayerType {\n  HOST = 'host',\n  CLIENT = 'client',\n}\n\nexport type BattleResultType = {\n  secondsLeft: number;\n  lifesLeft: number;\n};\n\nexport type Exercises = Record<DifficultyType, ExerciseDataType[]>;\n\nexport type GameStoreType = {\n  difficulty: DifficultyType;\n  playerType: PlayerType;\n  gameId: string;\n  rootStore: RootStore;\n  isGameStarted: boolean;\n  isGameEnded: boolean;\n  heroScore: number;\n  rivalScore: number;\n  exercises: ExerciseDataType[];\n  currentBattleIndex: number;\n  heroBattleResult: BattleResultType | null;\n  rivalBattleResult: BattleResultType | null;\n  setDifficulty: (difficulty: DifficultyType) => void;\n  setPlayerType: (playerType: PlayerType) => void;\n  setScore: (heroScore: number, rivalScore: number) => void;\n  getExercises: () => void;\n  startGame: () => void;\n  startBattle: (exercise?: ExerciseDataType) => void;\n  addScores: () => void;\n  saveBattleResult: (result: BattleResultType, isRival: boolean) => void;\n  endGame: () => void;\n  endBattle: () => void;\n  saveRestartRequest: () => void;\n  resetGame: () => void;\n};\n","import { DifficultyType, Exercises } from './types';\n\nexport const exercises: Exercises = {\n  [DifficultyType.EASY]: [\n    {\n      word: 'народ',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'слева',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'халат',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'рекорд',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'вокруг',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'пакгауз',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'давить',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'налево',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'гараж',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'опушка',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'адъюнкт',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'архаизм',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'аккорд',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'озон',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'корзина',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n  ],\n  [DifficultyType.MEDIUM]: [\n    {\n      word: 'ноябрь',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'питомец',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'колосс',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'сувенир',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'мятеж',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'жюри',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'этикет',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'витязь',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'диплом',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'кипяток',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'втройне',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'сканер',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'огурец',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'пшеница',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'панцирь',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n  ],\n  [DifficultyType.HARD]: [\n    {\n      word: 'багаж',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'массаж',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'вброд',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'доныне',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'портрет',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'сеанс',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'осина',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'ладоши',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'амплуа',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'интерес',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'балет',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'престол',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'щеколда',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'пример',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n    {\n      word: 'мебель',\n      soundSrc: '/',\n      imageSrc: '/',\n    },\n  ],\n};\n","import cn from 'classnames';\nimport './style.scss';\n\nexport enum ButtonType {\n  MAIN_MENU = 'mainMenu',\n  START_GAME = 'startGame',\n}\n\nexport const Button = ({\n  type,\n  handleClick,\n  text,\n}: {\n  handleClick?: () => void;\n  type?: ButtonType;\n  text: string;\n}) => {\n  return (\n    <div className={cn('button', type)} onClick={handleClick}>\n      {text}\n    </div>\n  );\n};\n","import { action, makeObservable, observable } from 'mobx';\nimport { shuffle } from 'src/utils/helpers';\nimport { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\nimport { MessageType } from '../connectionStore';\nimport { exercises } from './exercises';\nimport {\n  BattleResultType,\n  DifficultyType,\n  GameStoreType,\n  PlayerType,\n} from './types';\n\nconst BATTLES_AMOUNT = 10;\nconst REWARD_FOR_LIFE = 100;\nconst REWARD_FOR_SECOND = 100;\n\nexport class GameStore implements GameStoreType {\n  difficulty = DifficultyType.EASY;\n  playerType = PlayerType.HOST;\n  gameId = '';\n  rootStore: RootStore;\n  isGameStarted = false;\n  isGameEnded = false;\n  heroScore = 0;\n  rivalScore = 0;\n  exercises: ExerciseDataType[] = [];\n  currentBattleIndex = 0;\n  heroBattleResult: BattleResultType | null;\n  rivalBattleResult: BattleResultType | null;\n\n  constructor({ rootStore }: { rootStore: RootStore }) {\n    makeObservable(this, {\n      difficulty: observable,\n      playerType: observable,\n      gameId: observable,\n      isGameStarted: observable,\n      isGameEnded: observable,\n      heroScore: observable,\n      rivalScore: observable,\n      heroBattleResult: observable,\n      rivalBattleResult: observable,\n      setDifficulty: action,\n      setPlayerType: action,\n      setScore: action,\n      getExercises: action,\n      startGame: action,\n      startBattle: action,\n      addScores: action,\n      saveBattleResult: action,\n      endGame: action,\n      endBattle: action,\n      saveRestartRequest: action,\n      resetGame: action,\n    });\n\n    this.rootStore = rootStore;\n    this.heroBattleResult = null;\n    this.rivalBattleResult = null;\n  }\n\n  setDifficulty = (difficulty: DifficultyType) => {\n    this.difficulty = difficulty;\n  };\n\n  setPlayerType = (playerType: PlayerType) => {\n    this.playerType = playerType;\n  };\n\n  setScore = (heroScore: number, rivalScore: number) => {\n    this.heroScore = heroScore;\n    this.rivalScore = rivalScore;\n  };\n\n  getExercises = () => {\n    this.exercises = shuffle(exercises[this.difficulty]).slice(\n      0,\n      BATTLES_AMOUNT,\n    );\n    console.log('this.exercises', this.exercises);\n  };\n\n  startGame = () => {\n    this.getExercises();\n    this.setScore(0, 0);\n    this.isGameStarted = true;\n    this.rootStore.pageStore.changePage('battle');\n    if (this.playerType === PlayerType.HOST) this.startBattle();\n  };\n\n  startBattle = (exercise?: ExerciseDataType) => {\n    this.rivalBattleResult = null;\n    this.heroBattleResult = null;\n    if (exercise) {\n      this.rootStore.battleStore.startBattle(exercise);\n    } else {\n      const exercise = this.exercises[this.currentBattleIndex];\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.START_BATTLE,\n        exercise,\n      });\n      this.rootStore.battleStore.startBattle(exercise);\n    }\n  };\n\n  addScores = () => {\n    this.heroScore +=\n      (this.heroBattleResult?.lifesLeft ?? 0) * REWARD_FOR_LIFE +\n      (this.heroBattleResult?.secondsLeft ?? 0) * REWARD_FOR_SECOND;\n    this.rivalScore +=\n      (this.rivalBattleResult?.lifesLeft ?? 0) * REWARD_FOR_LIFE +\n      (this.rivalBattleResult?.secondsLeft ?? 0) * REWARD_FOR_SECOND;\n  };\n\n  saveBattleResult = (result: BattleResultType, isRival = false) => {\n    if (isRival) {\n      this.rivalBattleResult = result;\n      if (this.heroBattleResult) this.endBattle();\n    } else {\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.FINISH_EXERCISE,\n        ...result,\n      });\n      this.heroBattleResult = result;\n      if (this.rivalBattleResult) this.endBattle();\n    }\n  };\n\n  endGame = () => {\n    this.isGameEnded = true;\n    this.rootStore.pageStore.changePage('battleInfo');\n  };\n\n  endBattle = () => {\n    this.currentBattleIndex++;\n\n    if (\n      this.currentBattleIndex >= BATTLES_AMOUNT &&\n      this.playerType === PlayerType.HOST\n    ) {\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.END_GAME,\n      });\n      this.endGame();\n    }\n  };\n\n  saveRestartRequest = () => {\n    // TODO сохранить согласие противника на перезапуск\n  };\n\n  resetGame = () => {\n    this.rootStore.pageStore.changePage('mainMenu');\n    this.rootStore.connectionStore.closeConnection();\n    this.gameId = '';\n  };\n}\n","export const shuffle = <T>(array: T[]): T[] => {\n  const arrayCopy = [...array];\n  for (let i = arrayCopy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];\n  }\n\n  return arrayCopy;\n};\n","import { action, makeObservable, observable } from 'mobx';\n\nexport type PageNameType =\n  | 'mainMenu'\n  | 'difficultyChoice'\n  | 'connectionForm'\n  | 'battleInfo'\n  | 'battle';\n\nexport class PageStore {\n  activePageName: PageNameType = 'mainMenu';\n  constructor() {\n    makeObservable(this, {\n      activePageName: observable,\n      changePage: action,\n    });\n  }\n\n  changePage = (pageName: PageNameType) => {\n    this.activePageName = pageName;\n  };\n}\n","import { action, makeObservable, observable } from 'mobx';\n\nexport type ExerciseDataType = {\n  word: string;\n  soundSrc: string;\n  imageSrc: string;\n};\n\nexport type TimerType = number;\n\nexport class BattleStore {\n  exerciseData: ExerciseDataType;\n\n  counterLife: number;\n\n  listLetter: string[];\n\n  isMistake: boolean;\n\n  isPlayingSound: boolean;\n\n  isCorrectAnswer: boolean;\n\n  activeLetter: string;\n\n  constructor() {\n    makeObservable(this, {\n      counterLife: observable,\n      listLetter: observable,\n      isMistake: observable,\n      activeLetter: observable,\n      isPlayingSound: observable,\n      isCorrectAnswer: observable,\n      setLetter: action,\n      setMistake: action,\n      setActiveLetter: action,\n      setPlayingSound: action,\n    });\n\n    this.counterLife = 3;\n    this.listLetter = ['г', 'е'];\n    this.isMistake = false;\n    this.activeLetter = '';\n    this.isPlayingSound = false;\n    this.isCorrectAnswer = false;\n\n    this.exerciseData = {\n      word: 'гепард',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_12/2.12._urok_5.3.mp3',\n      imageSrc: 'https://mirplaneta.ru/images/6/1214.jpg',\n    };\n  }\n\n  setActiveLetter = (letter: string) => {\n    this.activeLetter = letter;\n  };\n\n  getMistake = () => {\n    return this.isMistake;\n  };\n\n  setPlayingSound = (state: boolean) => {\n    this.isPlayingSound = state;\n  };\n\n  setMistake = (state: boolean) => {\n    this.isMistake = state;\n  };\n\n  getListLetter = () => {\n    return this.listLetter;\n  };\n\n  setLetter = (letter: string) => {\n    this.setActiveLetter(letter);\n    this.checkMistake(this.checkLetter(letter));\n    if (this.getMistake()) return;\n    this.listLetter.push(letter);\n    this.setActiveLetter('');\n    this.checkWord();\n  };\n\n  checkWord = () => {\n    if (this.listLetter.length === this.exerciseData.word.length) {\n      this.endBattle();\n    }\n  };\n\n  checkMistake = (isMistake: boolean) => {\n    this.setMistake(isMistake);\n  };\n\n  checkLetter = (letter: string) => {\n    const valueLetter = this.exerciseData.word.indexOf(letter);\n    const countLetters = this.listLetter.length;\n    const mistake = valueLetter === countLetters ? false : true;\n    return mistake;\n  };\n\n  startBattle = (exercise: ExerciseDataType) => {\n    // TODO сохранение текущего задания, сброс жизней на 3, сброс таймера на 10\n    console.log('exercise', exercise);\n  };\n\n  endBattle = () => {\n    this.isCorrectAnswer = true;\n    // TODO отправка в гейм стор результата\n    // const result: BattleResultType = {\n    //   secondsLeft: 2,\n    //   lifesLeft: 2,\n    // };\n    // this.rootStore.gameStore.saveBattleResult(result);\n  };\n}\n","import { createContext, useContext } from 'react';\nimport { GameStore } from './gameStore/gameStore';\nimport { PageStore } from './pageStore';\nimport { BattleStore } from './battleStore';\nimport { ConnectionStore, ConnectionStoreType } from './connectionStore';\n\nexport class RootStore {\n  pageStore: PageStore;\n  gameStore: GameStore;\n  connectionStore: ConnectionStoreType;\n  battleStore: BattleStore;\n\n  constructor() {\n    this.pageStore = new PageStore();\n    this.gameStore = new GameStore({ rootStore: this });\n    this.connectionStore = new ConnectionStore({ rootStore: this });\n    this.battleStore = new BattleStore();\n  }\n}\n\nexport const createStore = (): RootStore => {\n  return new RootStore();\n};\n\nexport const ContextStore = createContext<RootStore>({} as RootStore);\n\nexport const useStore = (): RootStore => useContext<RootStore>(ContextStore);\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { Button, MainMenuButton } from 'src/components';\nimport { useStore } from 'src/store';\nimport './style.scss';\n\nexport const ConnectionForm = observer(() => {\n  const [gameId, setGameId] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const { pageStore, connectionStore } = useStore();\n  const { isConnected } = connectionStore;\n\n  const handleConnectClick = async () => {\n    setIsConnecting(true);\n    await connectionStore.startClientSession(gameId);\n  };\n\n  useEffect(() => {\n    if (isConnected) {\n      pageStore.changePage('battleInfo');\n    }\n  }, [isConnected]);\n\n  return (\n    <div className=\"connectionForm\">\n      {isConnecting ? (\n        'Подключение...'\n      ) : (\n        <div className=\"formWrapper\">\n          Веди код игры:\n          <input value={gameId} onChange={(ev) => setGameId(ev.target.value)} />\n          <Button\n            handleClick={() => handleConnectClick()}\n            text=\"Подключиться\"\n          />\n        </div>\n      )}\n      <MainMenuButton />\n    </div>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport { useStore } from 'src/store';\nimport { MainMenuButton, StartButton } from 'src/components';\nimport { PlayerType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const BattleInfo = observer(() => {\n  const { gameStore, connectionStore } = useStore();\n  const { isConnected, connectionId } = connectionStore;\n  const { playerType } = gameStore;\n\n  return (\n    <div className=\"battleInfo\">\n      {playerType === PlayerType.HOST && (\n        <div className=\"battleCode\">\n          Код игры: {connectionId}. Отправь его сопернику для подключения.\n        </div>\n      )}\n      <div className=\"fighter hero\"></div>\n      <div className=\"versus\">VS</div>\n      {isConnected ? (\n        <div className=\"fighter rival\"></div>\n      ) : (\n        'Ожидание соперника...'\n      )}\n      <MainMenuButton />\n      {isConnected && playerType === PlayerType.HOST && (\n        <StartButton type=\"game\" />\n      )}\n    </div>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport {\n  MainMenu,\n  DifficultyChoice,\n  ConnectionForm,\n  BattleInfo,\n  Battle,\n} from 'src/pages';\nimport { useStore } from 'src/store';\nimport { PageNameType } from 'src/store/pageStore';\n\nconst pages: Record<PageNameType, () => JSX.Element> = {\n  mainMenu: MainMenu,\n  difficultyChoice: DifficultyChoice,\n  connectionForm: ConnectionForm,\n  battleInfo: BattleInfo,\n  battle: Battle,\n};\n\nexport const PageManager = observer(() => {\n  const { pageStore } = useStore();\n\n  const PageComponent = pages[pageStore.activePageName];\n\n  return <PageComponent />;\n});\n","import { Button } from 'src/components';\nimport { useStore } from 'src/store';\nimport { PlayerType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const MainMenu = () => {\n  const { gameStore, pageStore, connectionStore } = useStore();\n\n  const handleCreateGameClick = () => {\n    gameStore.setPlayerType(PlayerType.HOST);\n    pageStore.changePage('difficultyChoice');\n    connectionStore.startHostSession();\n  };\n\n  const handleConnectClick = () => {\n    gameStore.setPlayerType(PlayerType.CLIENT);\n    pageStore.changePage('connectionForm');\n  };\n\n  return (\n    <div className=\"mainPage\">\n      <div className=\"wrapperButton\">\n        <Button handleClick={handleCreateGameClick} text=\"Создать битву\" />\n        <Button\n          handleClick={handleConnectClick}\n          text=\"Присоединиться к битве\"\n        />\n      </div>\n    </div>\n  );\n};\n","import { Button, MainMenuButton } from 'src/components';\nimport { useStore } from 'src/store';\nimport { DifficultyType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const DifficultyChoice = () => {\n  const { gameStore, pageStore } = useStore();\n\n  const handleDifficultyChoice = (difficulty: DifficultyType) => {\n    gameStore.setDifficulty(difficulty);\n    pageStore.changePage('battleInfo');\n  };\n\n  return (\n    <div className=\"difficultyPage\">\n      <div className=\"wrapperButton\">\n        {Object.values(DifficultyType).map((difficulty) => (\n          <Button\n            key={difficulty}\n            handleClick={() => handleDifficultyChoice(difficulty)}\n            text={difficulty}\n          />\n        ))}\n      </div>\n      <MainMenuButton />\n    </div>\n  );\n};\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { useStore } from 'src/store';\nimport { PlayerType } from 'src/store/gameStore';\nimport { Countdown, LifeList, StartButton, WordAnswer } from 'src/components';\nimport ReactHowler from 'react-howler';\nimport cn from 'classnames';\nimport './style.scss';\n\nexport const Battle = observer(() => {\n  const { battleStore, gameStore } = useStore();\n  const { counterLife, exerciseData, isPlayingSound, isCorrectAnswer } =\n    battleStore;\n  const {\n    playerType,\n    heroScore,\n    rivalScore,\n    heroBattleResult,\n    rivalBattleResult,\n  } = gameStore;\n  const listLetter = battleStore.getListLetter();\n  const styleImage = {\n    backgroundImage: exerciseData.imageSrc,\n  };\n  const isBattleEnded = heroBattleResult && rivalBattleResult;\n\n  const [isCountdownGoing, setIsCountdownGoing] = useState(false);\n\n  const handleClickExercise = () => {\n    battleStore.setPlayingSound(true);\n  };\n\n  const handleEndSound = () => {\n    battleStore.setPlayingSound(false);\n  };\n\n  useEffect(() => {\n    battleStore.setPlayingSound(true);\n  }, []);\n\n  useEffect(() => {\n    setIsCountdownGoing(true);\n  }, [exerciseData]);\n\n  const countdownCallback = () => {\n    setIsCountdownGoing(false);\n  };\n\n  const styleAnswer = cn('exercise', { correctAnswer: isCorrectAnswer });\n\n  // mistake - ошибка буквы\n  // correctAnswer - стили состояние правильного ответа\n\n  return (\n    <div className=\"pageBattle\">\n      <div className=\"headerWrapper\">\n        <div className=\"leftContainer characterInfoContainer\">\n          <div className=\"topLine\">\n            <div className=\"avatar\"></div>\n            <div className=\"nameContainer\">\n              <div className=\"nickname\">Ты</div>\n              <LifeList count={counterLife} />\n            </div>\n          </div>\n          <div className=\"glassesWrapper\">\n            <span className=\"glassesTitle\">Очки:</span>\n            <span className=\"glassesNumber\">{heroScore}</span>\n          </div>\n        </div>\n        <div className=\"centerContainer\">0:12</div>\n        <div className=\"rightContainer characterInfoContainer\">\n          <div className=\"topLine\">\n            <div className=\"avatar\"></div>\n            <div className=\"nameContainer\">\n              <div className=\"nickname\">Соперник</div>\n            </div>\n          </div>\n          <div className=\"glassesWrapper\">\n            <span className=\"glassesNumber\">{rivalScore}</span>\n            <span className=\"glassesTitle\">:Очки</span>\n          </div>\n        </div>\n      </div>\n      {isCountdownGoing ? (\n        <Countdown callback={countdownCallback} />\n      ) : (\n        <>\n          <div className=\"exerciseContainer\">\n            <div className={styleAnswer}>\n              <div\n                className=\"imageExercise\"\n                style={styleImage}\n                onClick={handleClickExercise}\n              >\n                <ReactHowler\n                  src={exerciseData.soundSrc}\n                  playing={isPlayingSound}\n                  onEnd={handleEndSound}\n                />\n                <div className=\"soundIcon\"></div>\n              </div>\n              <WordAnswer\n                letters={listLetter}\n                isCorrectAnswer={isCorrectAnswer}\n              />\n            </div>\n          </div>\n          <div className=\"keyBoardWrapper\">\n            <div className=\"keyBoardContainer\">\n              <div className=\"keyBoardItem\"></div>\n            </div>\n          </div>\n        </>\n      )}\n      {playerType === PlayerType.HOST && isBattleEnded && (\n        <StartButton type=\"battle\" />\n      )}\n    </div>\n  );\n});\n","import { Button, ButtonType } from 'src/components';\nimport { useStore } from 'src/store';\n\nexport const MainMenuButton = () => {\n  const { gameStore } = useStore();\n  return (\n    <Button\n      type={ButtonType.MAIN_MENU}\n      handleClick={() => gameStore.resetGame()}\n      text=\"На главную\"\n    />\n  );\n};\n","import { Button, ButtonType } from 'src/components';\nimport { useStore } from 'src/store';\nimport { MessageType } from 'src/store/connectionStore/types';\n\nexport const StartButton = ({ type }: { type: 'game' | 'battle' }) => {\n  const { gameStore, connectionStore } = useStore();\n  const { isGameEnded } = gameStore;\n  const handleClick = () => {\n    switch (type) {\n      case 'game':\n        connectionStore.sendMessage({\n          type: MessageType.START_GAME,\n        });\n        gameStore.startGame();\n        break;\n      case 'battle':\n        gameStore.startBattle();\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getText = () => {\n    switch (type) {\n      case 'game':\n        return isGameEnded ? 'Новая игра' : 'Начать игру';\n      case 'battle':\n        return 'Следующее слово';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Button\n      type={ButtonType.START_GAME}\n      handleClick={handleClick}\n      text={getText()}\n    />\n  );\n};\n","import cn from 'classnames';\nimport './style.scss';\n\nexport const LifeItem = ({ isDisabled }: { isDisabled: boolean }) => {\n  const styleItem = cn('lifeElement', { disabledElem: isDisabled });\n  return <div className={styleItem} />;\n};\n","import { LifeItem } from '.../index';\nimport './style.scss';\n\nexport const LifeList = ({ count }: { count: number }) => {\n  const listItem = [];\n  for (let i = 1; i < 4; i++) {\n    if (i < count) {\n      listItem.push(<LifeItem isDisabled={false} key={`lifeItem_${i}`} />);\n    } else {\n      listItem.push(<LifeItem isDisabled={true} key={`lifeItem_${i}`} />);\n    }\n  }\n  return <div className=\"lifeList\">{listItem}</div>;\n};\n","import './style.scss';\n\nexport const LetterAnswer = ({ letter }: { letter: string }) => {\n  return <div className=\"letterAnswer\">{letter}</div>;\n};\n","import { observer } from 'mobx-react-lite';\nimport './style.scss';\nimport { LetterAnswer, InputLetter } from '.../index';\n\nexport const WordAnswer = observer(\n  ({\n    letters,\n    isCorrectAnswer,\n  }: {\n    letters: string[];\n    isCorrectAnswer: boolean;\n  }) => {\n    const listLetter = [];\n    for (const index in letters) {\n      listLetter.push(\n        <LetterAnswer letter={letters[index]} key={`LetterAnswer_${index}`} />,\n      );\n    }\n\n    return (\n      <div className=\"wordAnswer\">\n        {listLetter}\n        {!isCorrectAnswer && <InputLetter />}\n      </div>\n    );\n  },\n);\n","import { observer } from 'mobx-react-lite';\nimport cn from 'classnames';\nimport { useStore } from 'src/store';\nimport './style.scss';\n\nexport const InputLetter = observer(() => {\n  const { battleStore } = useStore();\n  const { activeLetter } = battleStore;\n  const isHide = false;\n  const isMistake = battleStore.getMistake();\n\n  const styleContainer = cn('inputLetterContainer', {\n    hide: isHide,\n    mistake: isMistake,\n  });\n\n  const handleChangeInput = (event: any) => {\n    const letter = event.target.value;\n    if (letter.length > 1) {\n      event.target.value = letter[0];\n    }\n\n    battleStore.setLetter(letter);\n  };\n\n  return (\n    <div className={styleContainer}>\n      <input\n        type=\"text\"\n        className=\"inputLetter\"\n        autoFocus={true}\n        maxLength={1}\n        onChange={handleChangeInput}\n        value={activeLetter}\n      />\n    </div>\n  );\n});\n","import { useEffect, useState } from 'react';\nimport './style.scss';\n\nconst SECONDS_AMOUNT = 3;\n\nexport const Countdown = ({ callback }: { callback: () => void }) => {\n  const [secondsLeft, setSecondsLeft] = useState(SECONDS_AMOUNT);\n\n  useEffect(() => {\n    if (secondsLeft === 0) {\n      callback();\n    } else {\n      window.setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n    }\n  }, [secondsLeft]);\n\n  return <div className=\"countdown\">{secondsLeft}</div>;\n};\n","import { GlobalWrapper, PageManager } from './components';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalWrapper>\n        <PageManager />\n      </GlobalWrapper>\n    </div>\n  );\n}\n\nexport { App };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport { reportWebVitals };\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport { ContextStore, createStore } from './store';\nimport 'firebase/database';\nimport 'webrtc-adapter';\nimport '../index.scss';\n\nconst runApp = () => {\n  const store = createStore();\n  window.DEBUG_STORE = store;\n\n  ReactDOM.render(\n    <ContextStore.Provider value={store}>\n      <App />\n    </ContextStore.Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrunApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}