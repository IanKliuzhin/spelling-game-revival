{"version":3,"sources":["store/connectionStore/types.ts","components/GlobalWrapper/GlobalWrapper.tsx","store/connectionStore/firebaseConfig.ts","store/connectionStore/connectionStore.ts","store/gameStore/types.ts","store/gameStore/exercises.ts","components/Button/Button.tsx","store/gameStore/gameStore.ts","utils/helpers.ts","store/pageStore/pageStore.ts","store/battleStore/battleStore.ts","store/store.ts","pages/ConnectionForm/ConnectionForm.tsx","pages/BattleInfo/BattleInfo.tsx","components/PageManager/PageManager.tsx","pages/MainMenu/MainMenu.tsx","pages/DifficultyChoice/DifficultyChoice.tsx","pages/Battle/Battle.tsx","components/Button/ExitButton/ExitButton.tsx","components/Button/StartButton/StartButton.tsx","components/LifeItem/LifeItem.tsx","components/LifeList/LifeList.tsx","components/LetterAnswer/LetterAnswer.tsx","components/WordAnswer/WordAnswer.tsx","components/InputLetter/InputLetter.tsx","components/Countdown/Countdown.tsx","components/Score/Score.tsx","components/BattleResult/BattleResult.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["MessageType","GlobalWrapper","children","className","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DifficultyType","PlayerType","CONNECTION_CONFIG","iceServers","urls","ConnectionStore","rootStore","db","connectionId","connection","channel","isConnected","setIsConnected","startHostSession","a","RTCPeerConnection","nanoid","oniceconnectionstatechange","iceConnectionState","gameStore","abortGame","onicecandidate","event","candidate","set","ref","value","JSON","stringify","setChannel","createDataChannel","createOffer","offer","setLocalDescription","onValue","snapshot","exists","answer","parse","val","setRemoteDescription","addIceCandidate","RTCIceCandidate","startClientSession","receiveChannelCallback","ev","ondatachannel","createAnswer","onmessage","data","console","log","handleMessage","onclose","sendMessage","message","send","closeConnection","remove","close","type","START_GAME","startGame","START_BATTLE","startBattle","exercise","REDUCE_LIFES","reduceRivalLifes","FINISH_EXERCISE","saveBattleResult","secondsLeft","lifesLeft","END_GAME","endGame","REQUEST_RESTART","saveRestartRequest","GIVE_UP","giveUp","makeObservable","this","observable","action","app","initializeApp","getDatabase","ButtonType","exercises","EASY","word","soundSrc","imageSrc","MEDIUM","HARD","GameStore","START_LIFES_AMOUNT","REWARD_FOR_SECOND","REWARD_FOR_LIFE","difficulty","playerType","HOST","gameId","isGameStarted","isGameEnded","heroScore","rivalScore","currentBattleIndex","heroBattleResult","rivalBattleResult","hasRivalRequestedRestart","hasHeroRequestedRestart","rivalLifesAmount","setDifficulty","setPlayerType","setScore","getExercises","array","arrayCopy","i","length","j","Math","floor","random","shuffle","slice","pageStore","changePage","connectionStore","battleStore","addScores","result","isRival","endBattle","PageStore","activePageName","pageName","BattleStore","exerciseData","counterLife","listLetter","isMistake","isPlayingSound","isCorrectAnswer","activeLetter","counterTimer","timerId","deadline","losing","updateTimer","limitDeadline","timer","window","setInterval","startTimer","addLetters","setActiveLetter","letter","getMistake","setPlayingSound","state","setMistake","getListLetter","setLetter","checkMistake","checkLetter","checkCountLife","push","checkWord","countLetters","wordExercise","added","split","map","elem","clearInterval","RootStore","ContextStore","createContext","useStore","useContext","ConnectionForm","observer","useState","setGameId","isConnecting","setIsConnecting","handleSubmit","useEffect","onSubmit","onChange","target","placeholder","BattleInfo","heroWin","rivalWin","deadHeat","buttonOrCaption","CLIENT","pages","mainMenu","handleClick","text","difficultyChoice","listButtonName","Object","values","handleDifficultyChoice","connectionForm","battleInfo","battle","styleImage","backgroundImage","isBattleEnded","isCountdownGoing","setIsCountdownGoing","toJS","styleAnswer","cn","correctAnswer","LifeList","count","callback","style","onClick","src","playing","onEnd","format","WordAnswer","letters","PageManager","PageComponent","Button","ExitButton","isGameUp","MAIN_MENU","StartButton","getText","LifeItem","isDisabled","styleItem","disabledElem","listItem","LetterAnswer","item","index","InputLetter","styleContainer","hide","mistake","autoFocus","maxLength","currentTarget","Countdown","setSecondsLeft","setTimeout","Score","amount","prevPrintedAmount","useRef","printedAmount","setPrintedAmount","requestId","runAmountChange","startTimestamp","tick","timestamp","progress","min","current","requestAnimationFrame","cancelAnimationFrame","BattleResult","scoreForLifes","scoreForSeconds","summ","Array","from","_","n","String","padStart","App","onPerfEntry","store","DEBUG_STORE","ReactDOM","render","Provider","document","getElementById","runApp","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.c41df26f.chunk.js","sourcesContent":["import { Database } from '@firebase/database';\nimport { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\n\nexport type ConnectionStoreType = {\n  db: Database;\n  connectionId: string | null;\n  connection: RTCPeerConnection | null;\n  channel: RTCDataChannel | null;\n  isConnected: boolean;\n  rootStore: RootStore;\n  setIsConnected: (isConnected: boolean) => void;\n  startHostSession: () => Promise<void>;\n  startClientSession: (connectionId: string) => Promise<void>;\n  setChannel: (channel: RTCDataChannel) => void;\n  sendMessage: (message: Message) => void;\n  closeConnection: () => void;\n  handleMessage: (message: Message) => void;\n};\n\nexport enum MessageType {\n  START_GAME = 'start-game',\n  START_BATTLE = 'start-battle',\n  REDUCE_LIFES = 'reduce-lifes',\n  FINISH_EXERCISE = 'finish-exercise',\n  END_GAME = 'end-game',\n  REQUEST_RESTART = 'request-restart',\n  GIVE_UP = 'give-up',\n}\n\nexport type Message =\n  | {\n      type: MessageType.START_GAME;\n    }\n  | {\n      type: MessageType.START_BATTLE;\n      exercise: ExerciseDataType;\n    }\n  | {\n      type: MessageType.REDUCE_LIFES;\n    }\n  | {\n      type: MessageType.FINISH_EXERCISE;\n      secondsLeft: number;\n      lifesLeft: number;\n    }\n  | {\n      type: MessageType.END_GAME;\n    }\n  | {\n      type: MessageType.REQUEST_RESTART;\n    }\n  | {\n      type: MessageType.GIVE_UP;\n    };\n","import { ReactNode } from 'react';\n\nimport './style.scss';\n\nexport const GlobalWrapper = ({ children }: { children: ReactNode }) => {\n  return <div className=\"globalWrapper\">{children}</div>;\n};\n","export const firebaseConfig = {\n  apiKey: 'AIzaSyCfIbQmfN8ZWunC13zhJyDoQ1aL34mKvHI',\n  authDomain: 'react-p2p-test.firebaseapp.com',\n  databaseURL:\n    'https://react-p2p-test-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'react-p2p-test',\n  storageBucket: 'react-p2p-test.appspot.com',\n  messagingSenderId: '54650620648',\n  appId: '1:54650620648:web:a3a8bc21fd8bcd4782975d',\n};\n","import { makeObservable, observable, action } from 'mobx';\nimport { initializeApp } from 'firebase/app';\nimport {\n  Database,\n  getDatabase,\n  ref,\n  set,\n  onValue,\n  remove,\n} from 'firebase/database';\nimport { nanoid } from 'nanoid';\nimport { firebaseConfig } from './firebaseConfig';\nimport { RootStore } from '..';\nimport { ConnectionStoreType, Message, MessageType } from './types';\n\nconst CONNECTION_CONFIG = {\n  iceServers: [{ urls: 'stun:stun2.1.google.com:19302' }],\n};\n\nexport class ConnectionStore implements ConnectionStoreType {\n  db: Database;\n  connectionId: string | null = null;\n  connection: RTCPeerConnection | null = null;\n  channel: RTCDataChannel | null = null;\n  isConnected = false;\n  rootStore: RootStore;\n\n  constructor({ rootStore }: { rootStore: RootStore }) {\n    makeObservable(this, {\n      connectionId: observable,\n      isConnected: observable,\n      setIsConnected: action,\n      closeConnection: action,\n    });\n    this.rootStore = rootStore;\n    const app = initializeApp(firebaseConfig);\n    this.db = getDatabase(app);\n  }\n\n  setIsConnected = (isConnected: boolean) => {\n    this.isConnected = isConnected;\n  };\n\n  startHostSession = async () => {\n    this.connection = new RTCPeerConnection(CONNECTION_CONFIG);\n    this.connectionId = nanoid(5);\n    this.connection.oniceconnectionstatechange = () => {\n      if (this.connection?.iceConnectionState === 'disconnected') {\n        this.rootStore.gameStore.abortGame();\n      }\n    };\n\n    this.connection.onicecandidate = (event) => {\n      if (event.candidate) {\n        set(ref(this.db, `${this.connectionId}/host-candidate`), {\n          value: JSON.stringify(event.candidate),\n        });\n      }\n    };\n\n    this.setChannel(this.connection.createDataChannel('channel'));\n\n    const offer = await this.connection.createOffer();\n    await this.connection.setLocalDescription(offer);\n    await set(ref(this.db, `${this.connectionId}/offer`), {\n      value: JSON.stringify(offer),\n    });\n    onValue(ref(this.db, `${this.connectionId}/answer`), (snapshot) => {\n      if (this.connection && snapshot.exists()) {\n        const answer = JSON.parse(snapshot.val().value);\n        this.connection.setRemoteDescription(answer);\n      }\n    });\n\n    onValue(\n      ref(this.db, `${this.connectionId}/client-candidate`),\n      (snapshot) => {\n        if (this.connection && snapshot.exists()) {\n          const candidate = JSON.parse(snapshot.val().value);\n          this.connection?.addIceCandidate(new RTCIceCandidate(candidate));\n          this.setIsConnected(true);\n        }\n      },\n    );\n  };\n\n  startClientSession = async (connectionId: string) => {\n    this.connectionId = connectionId;\n    this.connection = new RTCPeerConnection(CONNECTION_CONFIG);\n\n    const receiveChannelCallback = (ev: RTCDataChannelEvent) => {\n      this.setChannel(ev.channel);\n    };\n    this.connection.ondatachannel = receiveChannelCallback;\n\n    this.connection.onicecandidate = (event) => {\n      if (event.candidate) {\n        set(ref(this.db, `${this.connectionId}/client-candidate`), {\n          value: JSON.stringify(event.candidate),\n        });\n      }\n    };\n\n    onValue(ref(this.db, `${this.connectionId}/offer`), async (snapshot) => {\n      if (this.connection && snapshot.exists()) {\n        const offer = JSON.parse(snapshot.val().value);\n        await this.connection?.setRemoteDescription(offer);\n        const answer = await this.connection?.createAnswer();\n        await this.connection?.setLocalDescription(answer);\n        await set(ref(this.db, `${this.connectionId}/answer`), {\n          value: JSON.stringify(answer),\n        });\n\n        onValue(\n          ref(this.db, `${this.connectionId}/host-candidate`),\n          (snapshot) => {\n            if (snapshot.exists()) {\n              const candidate = JSON.parse(snapshot.val().value);\n              this.connection?.addIceCandidate(new RTCIceCandidate(candidate));\n              this.setIsConnected(true);\n            }\n          },\n        );\n      }\n    });\n  };\n\n  setChannel = (channel: RTCDataChannel) => {\n    this.channel = channel;\n    this.channel.onmessage = (ev) => {\n      const data = JSON.parse(ev.data);\n      console.log('got data by channel', data);\n      this.handleMessage(data);\n    };\n    this.channel.onclose = () => {\n      this.rootStore.gameStore.abortGame();\n    };\n  };\n\n  sendMessage = (message: Message) => {\n    this.channel?.send(JSON.stringify(message));\n  };\n\n  closeConnection = () => {\n    remove(ref(this.db, `${this.connectionId}`));\n    this.channel?.close();\n    this.connection?.close();\n\n    this.channel = null;\n    this.connection = null;\n    this.connectionId = null;\n    this.isConnected = false;\n  };\n\n  handleMessage = (message: Message) => {\n    switch (message.type) {\n      case MessageType.START_GAME:\n        this.rootStore.gameStore.startGame();\n        break;\n      case MessageType.START_BATTLE:\n        this.rootStore.gameStore.startBattle(message.exercise);\n        break;\n      case MessageType.REDUCE_LIFES:\n        this.rootStore.gameStore.reduceRivalLifes();\n        break;\n      case MessageType.FINISH_EXERCISE:\n        this.rootStore.gameStore.saveBattleResult(\n          {\n            secondsLeft: message.secondsLeft,\n            lifesLeft: message.lifesLeft,\n          },\n          true,\n        );\n        break;\n      case MessageType.END_GAME:\n        this.rootStore.gameStore.endGame();\n        break;\n      case MessageType.REQUEST_RESTART:\n        this.rootStore.gameStore.saveRestartRequest(true);\n        break;\n      case MessageType.GIVE_UP:\n        this.rootStore.gameStore.giveUp(true);\n        break;\n      default:\n        break;\n    }\n  };\n}\n","import { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\n\nexport enum DifficultyType {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport enum PlayerType {\n  HOST = 'host',\n  CLIENT = 'client',\n}\n\nexport type BattleResultType = {\n  secondsLeft: number;\n  lifesLeft: number;\n};\n\nexport type Exercises = Record<DifficultyType, ExerciseDataType[]>;\n\nexport type GameStoreType = {\n  difficulty: DifficultyType;\n  playerType: PlayerType;\n  gameId: string;\n  rootStore: RootStore;\n  isGameStarted: boolean;\n  isGameEnded: boolean;\n  heroScore: number;\n  rivalScore: number;\n  exercises: ExerciseDataType[];\n  currentBattleIndex: number;\n  heroBattleResult: BattleResultType | null;\n  rivalBattleResult: BattleResultType | null;\n  hasRivalRequestedRestart: boolean;\n  hasHeroRequestedRestart: boolean;\n  rivalLifesAmount: number;\n  START_LIFES_AMOUNT: number;\n  REWARD_FOR_SECOND: number;\n  REWARD_FOR_LIFE: number;\n  setDifficulty: (difficulty: DifficultyType) => void;\n  setPlayerType: (playerType: PlayerType) => void;\n  setScore: (heroScore: number, rivalScore: number) => void;\n  getExercises: () => void;\n  startGame: () => void;\n  startBattle: (exercise?: ExerciseDataType) => void;\n  addScores: () => void;\n  saveBattleResult: (result: BattleResultType, isRival: boolean) => void;\n  endGame: () => void;\n  endBattle: () => void;\n  saveRestartRequest: () => void;\n  reduceRivalLifes: () => void;\n  abortGame: () => void;\n  giveUp: () => void;\n};\n","import { DifficultyType, Exercises } from './types';\n\nexport const exercises: Exercises = {\n  [DifficultyType.EASY]: [\n    {\n      word: 'ромашка',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_3.4.mp3',\n      imageSrc: '%PUBLIC_URL%/imagesWords/romashka.jpg',\n    },\n    {\n      word: 'самолет',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_9/2.9_urok_5.3.mp3',\n      imageSrc: '/imagesWords/samolet.jpg',\n    },\n    {\n      word: 'апельсин',\n      soundSrc:\n        ' https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_5.2.1.mp3',\n      imageSrc: '/imagesWords/apelsin.jpg',\n    },\n    {\n      word: 'акула',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_7/2.7_UROK_1.8.mp3',\n      imageSrc: '/imagesWords/akula.jpg',\n    },\n    {\n      word: 'собака',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_9/2.9_urok_2.6.mp3',\n      imageSrc: '/imagesWords/sobaka.jpg',\n    },\n    {\n      word: 'обезьяна',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_1.7.mp3',\n      imageSrc: '/imagesWords/obezana.jpg',\n    },\n    {\n      word: 'лягушка',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_1.5.mp3',\n      imageSrc: '/imagesWords/lagushka.jpg',\n    },\n    {\n      word: 'помидор',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_2.6.mp3',\n      imageSrc: '/imagesWords/pomidor.jpg',\n    },\n    {\n      word: 'стрекоза',\n      soundSrc:\n        ' https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_1.2.mp3',\n      imageSrc: '/imagesWords/strekoza.jpg',\n    },\n    {\n      word: 'цыпленок',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_1.4.mp3',\n      imageSrc: '/imagesWords/tciplenok.jpg',\n    },\n  ],\n  [DifficultyType.MEDIUM]: [\n    {\n      word: 'гусеница',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_1.6.mp3',\n      imageSrc: '/imagesWords/gusenica.jpg',\n    },\n    {\n      word: 'банан',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_2.5.mp3',\n      imageSrc: '/imagesWords/banan.jpg',\n    },\n    {\n      word: 'бочка',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_4.7.mp3',\n      imageSrc: '/imagesWords/bochka.jpg',\n    },\n    {\n      word: 'корова',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_9/2.9_urok_2.5.mp3',\n      imageSrc: '/imagesWords/corowa.jpg',\n    },\n    {\n      word: 'лилия',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_10/2.10_urok_3.5.mp3',\n      imageSrc: '/imagesWords/lilia.jpg',\n    },\n    {\n      word: 'баклажан',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_5.4.mp3',\n      imageSrc: '/imagesWords/baklajan.jpg',\n    },\n    {\n      word: 'ракета',\n      soundSrc:\n        ' https://cms-content.uchi.ru/audios/reading/lesson_2_9/2.9_urok_5.9.mp3',\n      imageSrc: '/imagesWords/raketa.jpg',\n    },\n    {\n      word: 'дельфин',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_9/D/1.9_urok_d6.7.mp3',\n      imageSrc: 'https/imagesWords/delfin.jpg',\n    },\n    {\n      word: 'зебра',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_13/1.13_urok_%20YUE2.4.mp3',\n      imageSrc: 'https/imagesWords/zebra.jpg',\n    },\n    {\n      word: 'фонарик',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_3.5.mp3',\n      imageSrc: '/imagesWords/fonarik.jpg',\n    },\n  ],\n  [DifficultyType.HARD]: [\n    {\n      word: 'пицца',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_10/1.10_urok_z6.7.mp3',\n      imageSrc: '/imagesWords/picca.jpg',\n    },\n    {\n      word: 'слон',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_10/1.10_ZS_1.2.mp3',\n      imageSrc: '/imagesWords/slon.jpg',\n    },\n    {\n      word: 'зонт',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_10/1.10_ZS_1.4.mp3',\n      imageSrc: '/imagesWords/zont.jpg',\n    },\n    {\n      word: 'лодка',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_8/2.8_urok_1.6.mp3',\n      imageSrc: '/imagesWords/lodka.jpg',\n    },\n    {\n      word: 'картофель',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_11/2.11_urok_5.3.1.mp3',\n      imageSrc: '/imagesWords/kartofel.jpg',\n    },\n    {\n      word: 'лимон',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_7/2.7_UROK_3.10.mp3',\n      imageSrc: '/imagesWords/limon.jpeg',\n    },\n    {\n      word: 'кальмар',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_7/2.7_UROK_5.2.mp3',\n      imageSrc: '/imagesWords/kalmar.jpg',\n    },\n    {\n      word: 'очки',\n      soundSrc:\n        ' https://cms-content.uchi.ru/audios/reading/lesson_2_6/2.6_urok3.6.mp3',\n      imageSrc: '/imagesWords/ochki.jpg',\n    },\n    {\n      word: 'туфли',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_2_6/2.6_urok5.7.mp3',\n      imageSrc: '/imagesWords/tufli.jpg',\n    },\n    {\n      word: 'дятел',\n      soundSrc:\n        'https://cms-content.uchi.ru/audios/reading/lesson_1_9/D/1.9_urok_d6.6.mp3',\n      imageSrc: '/imagesWords/datel.jpg',\n    },\n  ],\n};\n","import cn from 'classnames';\nimport './style.scss';\n\nexport enum ButtonType {\n  MAIN_MENU = 'mainMenu',\n  START_GAME = 'startGame',\n}\n\nexport const Button = ({\n  type,\n  handleClick,\n  text,\n}: {\n  handleClick?: () => void;\n  type?: ButtonType;\n  text: string;\n}) => {\n  return (\n    <div className={cn('button', type)} onClick={handleClick}>\n      {text}\n    </div>\n  );\n};\n","import { action, makeObservable, observable } from 'mobx';\nimport { shuffle } from 'src/utils/helpers';\nimport { RootStore } from '..';\nimport { ExerciseDataType } from '../battleStore';\nimport { MessageType } from '../connectionStore';\nimport { exercises } from './exercises';\nimport {\n  BattleResultType,\n  DifficultyType,\n  GameStoreType,\n  PlayerType,\n} from './types';\n\nconst BATTLES_AMOUNT = 10;\nconst REWARD_FOR_LIFE = 100;\nconst REWARD_FOR_SECOND = 100;\nconst START_LIFES_AMOUNT = 3;\n\nexport class GameStore implements GameStoreType {\n  START_LIFES_AMOUNT = START_LIFES_AMOUNT;\n  REWARD_FOR_SECOND = REWARD_FOR_SECOND;\n  REWARD_FOR_LIFE = REWARD_FOR_LIFE;\n  difficulty = DifficultyType.EASY;\n  playerType = PlayerType.HOST;\n  gameId = '';\n  rootStore: RootStore;\n  isGameStarted = false;\n  isGameEnded = false;\n  heroScore = 0;\n  rivalScore = 0;\n  exercises: ExerciseDataType[] = [];\n  currentBattleIndex = 0;\n  heroBattleResult: BattleResultType | null;\n  rivalBattleResult: BattleResultType | null;\n  hasRivalRequestedRestart = false;\n  hasHeroRequestedRestart = false;\n  rivalLifesAmount = START_LIFES_AMOUNT;\n\n  constructor({ rootStore }: { rootStore: RootStore }) {\n    makeObservable(this, {\n      difficulty: observable,\n      playerType: observable,\n      gameId: observable,\n      isGameStarted: observable,\n      isGameEnded: observable,\n      heroScore: observable,\n      rivalScore: observable,\n      heroBattleResult: observable,\n      rivalBattleResult: observable,\n      hasRivalRequestedRestart: observable,\n      hasHeroRequestedRestart: observable,\n      rivalLifesAmount: observable,\n      setDifficulty: action,\n      setPlayerType: action,\n      setScore: action,\n      getExercises: action,\n      startGame: action,\n      startBattle: action,\n      addScores: action,\n      saveBattleResult: action,\n      endGame: action,\n      endBattle: action,\n      saveRestartRequest: action,\n      reduceRivalLifes: action,\n      abortGame: action,\n      giveUp: action,\n    });\n\n    this.rootStore = rootStore;\n    this.heroBattleResult = null;\n    this.rivalBattleResult = null;\n  }\n\n  setDifficulty = (difficulty: DifficultyType) => {\n    this.difficulty = difficulty;\n  };\n\n  setPlayerType = (playerType: PlayerType) => {\n    this.playerType = playerType;\n  };\n\n  setScore = (heroScore: number, rivalScore: number) => {\n    this.heroScore = heroScore;\n    this.rivalScore = rivalScore;\n  };\n\n  getExercises = () => {\n    this.exercises = shuffle(exercises[this.difficulty]).slice(\n      0,\n      BATTLES_AMOUNT,\n    );\n  };\n\n  startGame = () => {\n    this.setScore(0, 0);\n    this.currentBattleIndex = 0;\n    this.hasRivalRequestedRestart = false;\n    this.hasHeroRequestedRestart = false;\n    this.rivalLifesAmount = this.START_LIFES_AMOUNT;\n    this.rootStore.pageStore.changePage('battle');\n    if (this.playerType === PlayerType.HOST) {\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.START_GAME,\n      });\n      this.getExercises();\n      this.startBattle();\n    }\n  };\n\n  startBattle = (exercise?: ExerciseDataType) => {\n    this.rivalBattleResult = null;\n    this.heroBattleResult = null;\n    this.isGameStarted = true;\n    if (exercise) {\n      this.rootStore.battleStore.startBattle(exercise);\n    } else {\n      const exercise = this.exercises[this.currentBattleIndex];\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.START_BATTLE,\n        exercise,\n      });\n      this.rootStore.battleStore.startBattle(exercise);\n    }\n  };\n\n  addScores = () => {\n    this.heroScore +=\n      this.heroBattleResult?.lifesLeft && this.heroBattleResult?.secondsLeft\n        ? this.heroBattleResult.lifesLeft * REWARD_FOR_LIFE +\n          this.heroBattleResult.secondsLeft * REWARD_FOR_SECOND\n        : 0;\n    this.rivalScore +=\n      this.rivalBattleResult?.lifesLeft && this.rivalBattleResult?.secondsLeft\n        ? this.rivalBattleResult.lifesLeft * REWARD_FOR_LIFE +\n          this.rivalBattleResult.secondsLeft * REWARD_FOR_SECOND\n        : 0;\n  };\n\n  saveBattleResult = (result: BattleResultType, isRival = false) => {\n    if (isRival) {\n      this.rivalBattleResult = result;\n      if (this.heroBattleResult) this.endBattle();\n    } else {\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.FINISH_EXERCISE,\n        ...result,\n      });\n      this.heroBattleResult = result;\n      if (this.rivalBattleResult) this.endBattle();\n    }\n  };\n\n  endGame = () => {\n    this.isGameEnded = true;\n    this.rootStore.pageStore.changePage('battleInfo');\n  };\n\n  endBattle = () => {\n    this.currentBattleIndex++;\n    this.addScores();\n    if (\n      this.currentBattleIndex >= BATTLES_AMOUNT &&\n      this.playerType === PlayerType.HOST\n    ) {\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.END_GAME,\n      });\n      this.endGame();\n    }\n  };\n\n  saveRestartRequest = (isRival = false) => {\n    if (isRival) {\n      this.hasRivalRequestedRestart = true;\n    } else {\n      this.hasHeroRequestedRestart = true;\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.REQUEST_RESTART,\n      });\n    }\n    if (\n      this.hasHeroRequestedRestart &&\n      this.hasRivalRequestedRestart &&\n      this.playerType === PlayerType.HOST\n    ) {\n      this.startGame();\n    }\n  };\n\n  reduceRivalLifes = () => {\n    this.rivalLifesAmount--;\n  };\n\n  abortGame = () => {\n    this.rootStore.pageStore.changePage('mainMenu');\n    this.rootStore.connectionStore.closeConnection();\n    this.gameId = '';\n  };\n\n  giveUp = (isRival = false) => {\n    if (isRival) {\n      this.rivalScore = -1;\n    } else {\n      this.heroScore = -1;\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.GIVE_UP,\n      });\n    }\n    this.endGame();\n  };\n}\n","export const shuffle = <T>(array: T[]): T[] => {\n  const arrayCopy = [...array];\n  for (let i = arrayCopy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];\n  }\n\n  return arrayCopy;\n};\n\nexport const range = (length: number) => Array.from({ length }, (_, i) => i);\n","import { action, makeObservable, observable } from 'mobx';\n\nexport type PageNameType =\n  | 'mainMenu'\n  | 'difficultyChoice'\n  | 'connectionForm'\n  | 'battleInfo'\n  | 'battle';\n\nexport class PageStore {\n  activePageName: PageNameType = 'mainMenu';\n  constructor() {\n    makeObservable(this, {\n      activePageName: observable,\n      changePage: action,\n    });\n  }\n\n  changePage = (pageName: PageNameType) => {\n    this.activePageName = pageName;\n  };\n}\n","import { action, makeObservable, observable } from 'mobx';\nimport { RootStore } from '..';\nimport { MessageType } from '../connectionStore';\n\nexport type ExerciseDataType = {\n  word: string;\n  soundSrc: string;\n  imageSrc: string;\n};\n\nimport { BattleResultType } from '../gameStore/types';\n\nexport type TimerType = number;\n\nexport class BattleStore {\n  exerciseData: ExerciseDataType | null = null;\n\n  rootStore: RootStore;\n\n  counterLife: number;\n\n  listLetter: string[];\n\n  isMistake: boolean;\n\n  isPlayingSound: boolean;\n\n  isCorrectAnswer: boolean;\n\n  activeLetter: string;\n\n  counterTimer: number;\n\n  timerId: number;\n\n  deadline: string;\n\n  losing: boolean;\n\n  constructor({ rootStore }: { rootStore: RootStore }) {\n    makeObservable(this, {\n      counterLife: observable,\n      listLetter: observable,\n      isMistake: observable,\n      activeLetter: observable,\n      isPlayingSound: observable,\n      isCorrectAnswer: observable,\n      counterTimer: observable,\n      timerId: observable,\n      deadline: observable,\n      exerciseData: observable,\n      losing: observable,\n      setLetter: action,\n      setMistake: action,\n      setActiveLetter: action,\n      setPlayingSound: action,\n      timer: action,\n      updateTimer: action,\n      startBattle: action,\n      endBattle: action,\n    });\n\n    this.rootStore = rootStore;\n    this.counterLife = this.rootStore.gameStore.START_LIFES_AMOUNT;\n    this.listLetter = [];\n    this.isMistake = false;\n    this.activeLetter = '';\n    this.isPlayingSound = false;\n    this.isCorrectAnswer = false;\n    this.counterTimer = 20;\n    this.timerId = 0;\n    this.deadline = '20';\n    this.losing = false;\n\n    // this.exerciseData = {\n    //   word: 'акула',\n    //   soundSrc:\n    //     'https://cms-content.uchi.ru/audios/reading/lesson_2_7/2.7_UROK_1.8.mp3',\n    //   imageSrc: '/imagesWords/akula.jpg',\n    // };\n  }\n\n  startBattle = (exercise: ExerciseDataType) => {\n    this.counterTimer = 20;\n    this.listLetter = [];\n    this.counterLife = this.rootStore.gameStore.START_LIFES_AMOUNT;\n    this.timerId = 0;\n    this.deadline = '20';\n    this.exerciseData = exercise;\n    this.isMistake = false;\n    this.activeLetter = '';\n    this.isPlayingSound = false;\n    this.isCorrectAnswer = false;\n    this.losing = false;\n  };\n\n  updateTimer = () => {\n    this.counterTimer -= 1;\n    this.deadline = `${this.counterTimer}`;\n    if (this.counterTimer < 10) {\n      this.deadline = `0${this.counterTimer}`;\n    }\n\n    if (this.counterTimer === 0) {\n      this.limitDeadline();\n    }\n  };\n\n  timer = () => {\n    this.timerId = window.setInterval(this.updateTimer, 1000);\n  };\n\n  startTimer = () => {\n    this.timer();\n  };\n\n  limitDeadline = () => {\n    this.losing = true;\n    this.addLetters();\n    this.endBattle();\n  };\n\n  setActiveLetter = (letter: string) => {\n    this.activeLetter = letter;\n  };\n\n  getMistake = () => {\n    return this.isMistake;\n  };\n\n  setPlayingSound = (state: boolean) => {\n    this.isPlayingSound = state;\n  };\n\n  setMistake = (state: boolean) => {\n    this.isMistake = state;\n  };\n\n  getListLetter = () => {\n    return this.listLetter;\n  };\n\n  setLetter = (letter: string) => {\n    this.setActiveLetter(letter);\n    this.checkMistake(this.checkLetter(letter));\n    if (this.isMistake) {\n      this.counterLife -= 1;\n      this.rootStore.connectionStore.sendMessage({\n        type: MessageType.REDUCE_LIFES,\n      });\n      this.checkCountLife();\n      return;\n    }\n    this.listLetter.push(letter);\n    this.setActiveLetter('');\n    this.checkWord();\n  };\n\n  checkCountLife = () => {\n    if (this.counterLife === 0) {\n      this.losing = true;\n      this.addLetters();\n      this.endBattle();\n    }\n  };\n\n  checkWord = () => {\n    if (this.listLetter.length === this.exerciseData?.word.length) {\n      this.endBattle();\n    }\n  };\n\n  checkMistake = (isMistake: boolean) => {\n    this.setMistake(isMistake);\n  };\n\n  checkLetter = (letter: string) => {\n    const countLetters = this.listLetter.length;\n    const valueLetter = this.exerciseData?.word[countLetters];\n    const mistake = valueLetter === letter ? false : true;\n    return mistake;\n  };\n\n  addLetters = () => {\n    const countLetters = this.listLetter.length;\n    const wordExercise = this.exerciseData?.word;\n    const added = wordExercise?.slice(countLetters);\n    added?.split('').map((elem: string) => this.listLetter.push(elem));\n  };\n\n  endBattle = () => {\n    if (!this.losing) this.isCorrectAnswer = true;\n    clearInterval(this.timerId);\n    const result: BattleResultType = {\n      secondsLeft: this.counterTimer,\n      lifesLeft: this.counterLife,\n    };\n    this.rootStore.gameStore.saveBattleResult(result);\n  };\n}\n","import { createContext, useContext } from 'react';\nimport { GameStore } from './gameStore/gameStore';\nimport { PageStore } from './pageStore';\nimport { BattleStore } from './battleStore';\nimport { ConnectionStore, ConnectionStoreType } from './connectionStore';\n\nexport class RootStore {\n  pageStore: PageStore;\n  gameStore: GameStore;\n  connectionStore: ConnectionStoreType;\n  battleStore: BattleStore;\n\n  constructor() {\n    this.pageStore = new PageStore();\n    this.gameStore = new GameStore({ rootStore: this });\n    this.connectionStore = new ConnectionStore({ rootStore: this });\n    this.battleStore = new BattleStore({ rootStore: this });\n  }\n}\n\nexport const createStore = (): RootStore => {\n  return new RootStore();\n};\n\nexport const ContextStore = createContext<RootStore>({} as RootStore);\n\nexport const useStore = (): RootStore => useContext<RootStore>(ContextStore);\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { ExitButton } from 'src/components';\nimport { useStore } from 'src/store';\nimport './style.scss';\n\nexport const ConnectionForm = observer(() => {\n  const [gameId, setGameId] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const { pageStore, connectionStore } = useStore();\n  const { isConnected } = connectionStore;\n\n  const handleSubmit = async () => {\n    setIsConnecting(true);\n    await connectionStore.startClientSession(gameId);\n  };\n\n  useEffect(() => {\n    if (isConnected) {\n      pageStore.changePage('battleInfo');\n    }\n  }, [isConnected]);\n\n  return (\n    <div className=\"connectionForm\">\n      {isConnecting ? (\n        'Подключение...'\n      ) : (\n        <form className=\"formWrapper\" onSubmit={handleSubmit}>\n          Введи код игры:\n          <input\n            value={gameId}\n            onChange={(ev) => setGameId(ev.target.value)}\n            placeholder=\"Введите код\"\n            className=\"input\"\n          />\n          <input value=\"Подключиться\" type=\"submit\" className=\"button\" />\n        </form>\n      )}\n      <ExitButton />\n    </div>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport { useStore } from 'src/store';\nimport { ExitButton, StartButton } from 'src/components';\nimport { PlayerType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const BattleInfo = observer(() => {\n  const { gameStore, connectionStore } = useStore();\n  const { isConnected, connectionId } = connectionStore;\n  const {\n    playerType,\n    isGameEnded,\n    hasHeroRequestedRestart,\n    heroScore,\n    rivalScore,\n  } = gameStore;\n\n  let heroWin = false;\n  let rivalWin = false;\n  let deadHeat = false;\n  if (heroScore > rivalScore) {\n    heroWin = true;\n  }\n  if (rivalScore > heroScore) {\n    rivalWin = true;\n  }\n  if (rivalScore === heroScore) {\n    deadHeat = true;\n  }\n\n  const buttonOrCaption = hasHeroRequestedRestart ? (\n    <div className=\"waiting\">Ожидание решения противника</div>\n  ) : (\n    <StartButton type=\"game\" />\n  );\n\n  return (\n    <div className=\"battleInfo\">\n      {playerType === PlayerType.HOST && !isConnected && (\n        <div className=\"battleCode\">\n          Код игры: {connectionId}. Отправь его сопернику для подключения.\n        </div>\n      )}\n      <div className=\"fighter hero\">\n        <div className=\"avatarHero\" />\n        {isGameEnded && (\n          <div className=\"counterResult\">\n            {heroScore} <span>очков</span>\n          </div>\n        )}\n        {isGameEnded && heroWin && <div className=\"cup\" />}\n      </div>\n      <div className=\"versus\">\n        VS\n        {isGameEnded && deadHeat && <div className=\"deadHeat\" />}\n      </div>\n      {isConnected ? (\n        <div className=\"fighter rival\">\n          <div className=\"avatarRival\" />\n          {isGameEnded && (\n            <div className=\"counterResult\">\n              {rivalScore} <span>очков</span>\n            </div>\n          )}\n          {isGameEnded && rivalWin && <div className=\"cup\" />}\n        </div>\n      ) : (\n        'Ожидание соперника...'\n      )}\n      <ExitButton />\n      {playerType === PlayerType.HOST && isConnected && buttonOrCaption}\n      {playerType === PlayerType.CLIENT && isGameEnded && buttonOrCaption}\n    </div>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport {\n  MainMenu,\n  DifficultyChoice,\n  ConnectionForm,\n  BattleInfo,\n  Battle,\n} from 'src/pages';\nimport { useStore } from 'src/store';\nimport { PageNameType } from 'src/store/pageStore';\n\nconst pages: Record<PageNameType, () => JSX.Element> = {\n  mainMenu: MainMenu,\n  difficultyChoice: DifficultyChoice,\n  connectionForm: ConnectionForm,\n  battleInfo: BattleInfo,\n  battle: Battle,\n};\n\nexport const PageManager = observer(() => {\n  const { pageStore } = useStore();\n\n  const PageComponent = pages[pageStore.activePageName];\n\n  return <PageComponent />;\n});\n","import { Button } from 'src/components';\nimport { useStore } from 'src/store';\nimport { PlayerType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const MainMenu = () => {\n  const { gameStore, pageStore, connectionStore } = useStore();\n\n  const handleCreateGameClick = () => {\n    gameStore.setPlayerType(PlayerType.HOST);\n    pageStore.changePage('difficultyChoice');\n    connectionStore.startHostSession();\n  };\n\n  const handleConnectClick = () => {\n    gameStore.setPlayerType(PlayerType.CLIENT);\n    pageStore.changePage('connectionForm');\n  };\n\n  return (\n    <div className=\"mainPage\">\n      <div className=\"titlePage\">Словарная битва</div>\n      <div className=\"wrapperButton\">\n        <Button handleClick={handleCreateGameClick} text=\"Создать битву\" />\n        <Button\n          handleClick={handleConnectClick}\n          text=\"Присоединиться к битве\"\n        />\n      </div>\n    </div>\n  );\n};\n","import { Button, ExitButton } from 'src/components';\nimport { useStore } from 'src/store';\nimport { DifficultyType } from 'src/store/gameStore';\nimport './style.scss';\n\nexport const DifficultyChoice = () => {\n  const { gameStore, pageStore } = useStore();\n\n  const handleDifficultyChoice = (difficulty: DifficultyType) => {\n    gameStore.setDifficulty(difficulty);\n    pageStore.changePage('battleInfo');\n  };\n\n  const listButtonName = {\n    [DifficultyType.EASY]: 'Легкий',\n    [DifficultyType.MEDIUM]: 'Средний',\n    [DifficultyType.HARD]: 'Тяжёлый',\n  };\n\n  return (\n    <div className=\"difficultyPage\">\n      <div className=\"titlePage\">Выбор сложности</div>\n      <div className=\"wrapperButton\">\n        {Object.values(DifficultyType).map((difficulty) => (\n          <Button\n            key={difficulty}\n            handleClick={() => handleDifficultyChoice(difficulty)}\n            text={listButtonName[difficulty]}\n          />\n        ))}\n      </div>\n      <ExitButton />\n    </div>\n  );\n};\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { useStore } from 'src/store';\nimport { PlayerType } from 'src/store/gameStore';\nimport {\n  BattleResult,\n  Score,\n  Countdown,\n  ExitButton,\n  LifeList,\n  StartButton,\n  WordAnswer,\n} from 'src/components';\nimport ReactHowler from 'react-howler';\nimport cn from 'classnames';\nimport './style.scss';\nimport { toJS } from 'mobx';\n\nexport const Battle = observer(() => {\n  const { battleStore, gameStore } = useStore();\n  const {\n    counterLife,\n    exerciseData,\n    isPlayingSound,\n    isCorrectAnswer,\n    deadline,\n    losing,\n  } = battleStore;\n  const { playerType, heroBattleResult, rivalBattleResult, rivalLifesAmount } =\n    gameStore;\n  const listLetter = battleStore.getListLetter();\n  const styleImage = {\n    backgroundImage: `url(${exerciseData?.imageSrc})`,\n  };\n  const isBattleEnded = heroBattleResult && rivalBattleResult;\n\n  const [isCountdownGoing, setIsCountdownGoing] = useState(false);\n\n  const handleClickExercise = () => {\n    battleStore.setPlayingSound(true);\n  };\n\n  const handleEndSound = () => {\n    battleStore.setPlayingSound(false);\n  };\n\n  useEffect(() => {\n    setIsCountdownGoing(true);\n    console.log(toJS(exerciseData));\n  }, [exerciseData]);\n\n  const countdownCallback = () => {\n    setIsCountdownGoing(false);\n    battleStore.setPlayingSound(true);\n    battleStore.startTimer();\n  };\n  const styleAnswer = cn('exercise', {\n    correctAnswer: isCorrectAnswer,\n    losing: losing,\n  });\n\n  // mistake - ошибка буквы\n  // correctAnswer - стили состояние правильного ответа\n\n  return (\n    <div className=\"pageBattle\">\n      <div className=\"headerWrapper\">\n        <div className=\"leftContainer characterInfoContainer\">\n          <div className=\"topLine\">\n            <div className=\"avatar\"></div>\n            <div className=\"nameContainer\">\n              <div className=\"nickname\">Ты</div>\n              <LifeList count={counterLife} />\n            </div>\n          </div>\n          <Score />\n        </div>\n        <div className=\"centerContainer\">{`0:${deadline}`}</div>\n        <div className=\"rightContainer characterInfoContainer\">\n          <div className=\"topLine\">\n            <div className=\"avatar\"></div>\n            <div className=\"nameContainer\">\n              <div className=\"nickname\">Соперник</div>\n              <LifeList count={rivalLifesAmount} />\n            </div>\n          </div>\n          <Score isRival />\n        </div>\n      </div>\n      {isBattleEnded ? (\n        <div className=\"battleResultWrapper\">\n          <BattleResult />\n          <BattleResult isRival />\n        </div>\n      ) : isCountdownGoing ? (\n        <Countdown callback={countdownCallback} />\n      ) : (\n        <>\n          <div className=\"exerciseContainer\">\n            <div className={styleAnswer}>\n              <div\n                className=\"imageExercise\"\n                style={styleImage}\n                onClick={handleClickExercise}\n              >\n                {exerciseData && (\n                  <ReactHowler\n                    src={exerciseData.soundSrc}\n                    playing={isPlayingSound}\n                    onEnd={handleEndSound}\n                    format={['mp3']}\n                  />\n                )}\n                <div className=\"soundIcon\"></div>\n              </div>\n              <WordAnswer\n                letters={listLetter}\n                isCorrectAnswer={isCorrectAnswer}\n                losing={losing}\n              />\n            </div>\n          </div>\n          <div className=\"keyBoardWrapper\">\n            <div className=\"keyBoardContainer\">\n              <div className=\"keyBoardItem\"></div>\n            </div>\n          </div>\n          <ExitButton />\n        </>\n      )}\n      {playerType === PlayerType.HOST && isBattleEnded && (\n        <StartButton type=\"battle\" />\n      )}\n    </div>\n  );\n});\n","import { Button, ButtonType } from 'src/components';\nimport { useStore } from 'src/store';\n\nexport const ExitButton = () => {\n  const { gameStore } = useStore();\n  const { isGameStarted, isGameEnded } = gameStore;\n  const isGameUp = isGameStarted && !isGameEnded;\n  return (\n    <Button\n      type={ButtonType.MAIN_MENU}\n      handleClick={() =>\n        isGameUp ? gameStore.giveUp() : gameStore.abortGame()\n      }\n      text={isGameUp ? 'Сдаться' : 'На главную'}\n    />\n  );\n};\n","import { Button, ButtonType } from 'src/components';\nimport { useStore } from 'src/store';\n\nexport const StartButton = ({ type }: { type: 'game' | 'battle' }) => {\n  const { gameStore } = useStore();\n  const { isGameEnded } = gameStore;\n  const handleClick = () => {\n    switch (type) {\n      case 'game':\n        isGameEnded ? gameStore.saveRestartRequest() : gameStore.startGame();\n        break;\n      case 'battle':\n        gameStore.startBattle();\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getText = () => {\n    switch (type) {\n      case 'game':\n        return isGameEnded ? 'Новая игра' : 'Начать игру';\n      case 'battle':\n        return 'Следующее слово';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Button\n      type={ButtonType.START_GAME}\n      handleClick={handleClick}\n      text={getText()}\n    />\n  );\n};\n","import cn from 'classnames';\nimport './style.scss';\n\nexport const LifeItem = ({ isDisabled }: { isDisabled: boolean }) => {\n  const styleItem = cn('lifeElement', { disabledElem: isDisabled });\n  return <div className={styleItem} />;\n};\n","import { observer } from 'mobx-react-lite';\nimport { LifeItem } from '../index';\nimport './style.scss';\n\nexport const LifeList = observer(({ count }: { count: number }) => {\n  const listItem = [];\n  for (let i = 1; i < 4; i++) {\n    if (i <= count) {\n      listItem.push(<LifeItem isDisabled={false} key={`lifeItem_${i}`} />);\n    } else {\n      listItem.push(<LifeItem isDisabled={true} key={`lifeItem_${i}`} />);\n    }\n  }\n  return <div className=\"lifeList\">{listItem}</div>;\n});\n","import './style.scss';\n\nexport const LetterAnswer = ({ letter }: { letter: string }) => {\n  return <div className=\"letterAnswer\">{letter}</div>;\n};\n","import { observer } from 'mobx-react-lite';\nimport './style.scss';\nimport { LetterAnswer, InputLetter } from '../index';\n\nexport const WordAnswer = observer(\n  ({\n    letters,\n    isCorrectAnswer,\n    losing,\n  }: {\n    letters: string[];\n    isCorrectAnswer: boolean;\n    losing: boolean;\n  }) => {\n    return (\n      <div className=\"wordAnswer\">\n        {letters.map((item, index) => (\n          <LetterAnswer letter={item} key={`LetterAnswer_${index}`} />\n        ))}\n        {!isCorrectAnswer && !losing && <InputLetter />}\n      </div>\n    );\n  },\n);\n","import { observer } from 'mobx-react-lite';\nimport cn from 'classnames';\nimport { useStore } from 'src/store';\nimport './style.scss';\n\nexport const InputLetter = observer(() => {\n  const { battleStore } = useStore();\n  const { activeLetter } = battleStore;\n  const isHide = false;\n  const isMistake = battleStore.getMistake();\n\n  const styleContainer = cn('inputLetterContainer', {\n    hide: isHide,\n    mistake: isMistake,\n  });\n\n  const handleChangeInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const letter = event.currentTarget.value;\n    if (letter.length > 1) {\n      battleStore.setActiveLetter('');\n    }\n\n    if (letter === '') {\n      battleStore.setActiveLetter('');\n      return;\n    }\n\n    battleStore.setLetter(letter);\n  };\n\n  return (\n    <div className={styleContainer}>\n      <input\n        type=\"text\"\n        className=\"inputLetter\"\n        autoFocus={true}\n        maxLength={1}\n        onChange={handleChangeInput}\n        value={activeLetter}\n      />\n    </div>\n  );\n});\n","import { useEffect, useState } from 'react';\nimport './style.scss';\n\nconst SECONDS_AMOUNT = 3;\n\nexport const Countdown = ({ callback }: { callback: () => void }) => {\n  const [secondsLeft, setSecondsLeft] = useState(SECONDS_AMOUNT);\n\n  useEffect(() => {\n    if (secondsLeft === 0) {\n      callback();\n    } else {\n      window.setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n    }\n  }, [secondsLeft]);\n\n  return <div className=\"countdown\">{secondsLeft}</div>;\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useStore } from 'src/store';\nimport './style.scss';\n\nconst AMOUNT_CHANGE_DURATION = 500;\n\nexport const Score = ({ isRival = false }) => {\n  const { gameStore } = useStore();\n  const amount = isRival ? gameStore.rivalScore : gameStore.heroScore;\n  const prevPrintedAmount = useRef(amount);\n  const [printedAmount, setPrintedAmount] = useState(amount);\n  const requestId = useRef(0);\n\n  const runAmountChange = async () => {\n    let startTimestamp = 0;\n    const tick = (timestamp: number) => {\n      if (!startTimestamp) startTimestamp = timestamp;\n      const progress = Math.min(\n        (timestamp - startTimestamp) / AMOUNT_CHANGE_DURATION,\n        1,\n      );\n      setPrintedAmount(\n        Math.floor(\n          prevPrintedAmount.current +\n            progress * (amount - prevPrintedAmount.current),\n        ),\n      );\n      if (progress < 1) {\n        requestId.current = window.requestAnimationFrame(tick);\n      } else {\n        prevPrintedAmount.current = amount;\n      }\n    };\n    requestId.current = window.requestAnimationFrame(tick);\n  };\n\n  useEffect(() => {\n    window.cancelAnimationFrame(requestId.current);\n    runAmountChange();\n  }, [amount]);\n  return (\n    <div className=\"scoreWrapper\">\n      <div className=\"scoreNumber\">{printedAmount}</div>\n      <div className=\"starWrapper\">\n        <div className=\"star\"></div>\n      </div>\n    </div>\n  );\n};\n","import { useStore } from 'src/store';\nimport { BattleResultType } from 'src/store/gameStore';\nimport { range } from 'src/utils/helpers';\nimport './style.scss';\n\nexport const BattleResult = ({ isRival = false }) => {\n  const { gameStore } = useStore();\n  const { REWARD_FOR_LIFE, REWARD_FOR_SECOND } = gameStore;\n  const result = (\n    isRival ? gameStore.rivalBattleResult : gameStore.heroBattleResult\n  ) as BattleResultType;\n\n  const scoreForLifes = result.lifesLeft * REWARD_FOR_LIFE;\n  const scoreForSeconds = result.secondsLeft * REWARD_FOR_SECOND;\n\n  const summ =\n    scoreForLifes && scoreForSeconds ? scoreForLifes + scoreForSeconds : 0;\n\n  return (\n    <div className=\"battleResult\">\n      {summ > 0 && (\n        <>\n          <div className=\"scoreWrapper life\">\n            <div className=\"scoreImage\">\n              {range(result.lifesLeft).map((n) => (\n                <div key={n} className=\"icon\"></div>\n              ))}\n            </div>\n            * {REWARD_FOR_LIFE} = {scoreForLifes}\n          </div>\n          <div className=\"scoreWrapper time\">\n            <div className=\"scoreImage\">\n              <div className=\"icon\"></div> 0:\n              {String(result.secondsLeft).padStart(2, '0')}\n            </div>\n            * {REWARD_FOR_SECOND} = {scoreForSeconds}\n          </div>\n        </>\n      )}\n      <div className=\"scoreWrapper score\">\n        <div className=\"scoreImage\">\n          <div className=\"icon\"></div>\n        </div>{' '}\n        +{summ}\n      </div>\n    </div>\n  );\n};\n","import { GlobalWrapper, PageManager } from './components';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalWrapper>\n        <PageManager />\n      </GlobalWrapper>\n    </div>\n  );\n}\n\nexport { App };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport { reportWebVitals };\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport { ContextStore, createStore } from './store';\nimport 'firebase/database';\nimport 'webrtc-adapter';\nimport './index.scss';\n\nconst runApp = () => {\n  const store = createStore();\n  window.DEBUG_STORE = store;\n\n  ReactDOM.render(\n    <ContextStore.Provider value={store}>\n      <App />\n    </ContextStore.Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrunApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log)x)\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}